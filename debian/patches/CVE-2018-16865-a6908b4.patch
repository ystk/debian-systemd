From 052c57f132f04a3cf4148f87561618da1a6908b4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Zbigniew=20J=C4=99drzejewski-Szmek?= <zbyszek@in.waw.pl>
Date: Wed, 5 Dec 2018 22:45:02 +0100
Subject: [PATCH] journald: set a limit on the number of fields (1k)

We allocate a iovec entry for each field, so with many short entries,
our memory usage and processing time can be large, even with a relatively
small message size. Let's refuse overly long entries.

CVE-2018-16865
https://bugzilla.redhat.com/show_bug.cgi?id=1653861

What from I can see, the problem is not from an alloca, despite what the CVE
description says, but from the attack multiplication that comes from creating
many very small iovecs: (void* + size_t) for each three bytes of input message.
---
 src/journal/journald-native.c | 5 +++++
 src/shared/journal-importer.h | 3 +++
 2 files changed, 8 insertions(+)

Index: b/src/journal/journald-native.c
===================================================================
--- a/src/journal/journald-native.c	2019-01-22 15:38:12.075770468 -0500
+++ b/src/journal/journald-native.c	2019-01-22 16:56:10.129875969 -0500
@@ -124,6 +124,10 @@ void server_process_native_message(
                 }
 
                 /* A property follows */
+                if (n > ENTRY_FIELD_COUNT_MAX) {
+                        log_debug("Received an entry that has more than " STRINGIFY(ENTRY_FIELD_COUNT_MAX) " fields, ignoring entry.");
+                        goto finish;
+                }
 
                 /* n received properties, +1 for _TRANSPORT */
                 if (!GREEDY_REALLOC(iovec, m, n + 1 + N_IOVEC_META_FIELDS +
Index: b/src/journal/journald-native.h
===================================================================
--- a/src/journal/journald-native.h	2019-01-22 15:38:12.075770468 -0500
+++ b/src/journal/journald-native.h	2019-01-22 15:39:25.912381366 -0500
@@ -28,6 +28,9 @@
 #define ENTRY_SIZE_MAX (1024*1024*768)
 #define DATA_SIZE_MAX (1024*1024*768)
 
+/* The maximum number of fields in an entry */
+#define ENTRY_FIELD_COUNT_MAX 1024
+
 bool valid_user_field(const char *p, size_t l, bool allow_protected);
 
 void server_process_native_message(Server *s, const void *buffer, size_t buffer_size, struct ucred *ucred, struct timeval *tv, const char *label, size_t label_len);
