From: Markus Koschany <apo@debian.org>
Date: Wed, 2 Aug 2023 10:26:00 +0200
Subject: CVE-2023-26604_part2

Origin: https://github.com/systemd/systemd/commit/0a42426d797406b4b01a0d9c13bb759c2629d108
---
 man/less-variables.xml | 35 ++++++++++++++++++--------
 src/shared/env-util.c  | 10 ++++++++
 src/shared/env-util.h  |  1 +
 src/shared/pager.c     | 67 ++++++++++++++++++++++++++++++--------------------
 4 files changed, 77 insertions(+), 36 deletions(-)

diff --git a/man/less-variables.xml b/man/less-variables.xml
index 40e1f19..1288af0 100644
--- a/man/less-variables.xml
+++ b/man/less-variables.xml
@@ -26,16 +26,31 @@
                         (<literal>FRSXMK</literal>).</para></listitem>
                 </varlistentry>
                 <varlistentry id='lesssecure'>
-                        <term><varname>$SYSTEMD_LESSSECURE</varname></term>
-
-                        <listitem><para>Takes a boolean argument. Overrides the
-                        <varname>$LESSSECURE</varname> environment variable
-                        when invoking the pager, which controls the "secure"
-                        mode of less (which disables commands such as
-                        <literal>|</literal> which allow to easily shell out to
-                        external command lines). By default less secure mode is
-                        enabled, with this setting it may be
-                        disabled.</para></listitem>
+                      <term><varname>$SYSTEMD_PAGERSECURE</varname></term>
+
+                      <listitem><para>Takes a boolean argument. When true, the "secure" mode of the pager is enabled; if
+                      false, disabled. If <varname>$SYSTEMD_PAGERSECURE</varname> is not set at all, secure mode is enabled
+                      if the effective UID is not the same as the owner of the login session, see <citerefentry
+                      project='man-pages'><refentrytitle>geteuid</refentrytitle><manvolnum>2</manvolnum></citerefentry> and
+                      <citerefentry><refentrytitle>sd_pid_get_owner_uid</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
+                      In secure mode, <option>LESSSECURE=1</option> will be set when invoking the pager, and the pager shall
+                      disable commands that open or create new files or start new subprocesses. When
+                      <varname>$SYSTEMD_PAGERSECURE</varname> is not set at all, pagers which are not known to implement
+                      secure mode will not be used. (Currently only
+                      <citerefentry><refentrytitle>less</refentrytitle><manvolnum>1</manvolnum></citerefentry> implements
+                      secure mode.)</para>
+
+                      <para>Note: when commands are invoked with elevated privileges, for example under <citerefentry
+                      project='man-pages'><refentrytitle>sudo</refentrytitle><manvolnum>8</manvolnum></citerefentry> or
+                      <citerefentry
+                      project='die-net'><refentrytitle>pkexec</refentrytitle><manvolnum>1</manvolnum></citerefentry>, care
+                      must be taken to ensure that unintended interactive features are not enabled. "Secure" mode for the
+                      pager may be enabled automatically as describe above. Setting <varname>SYSTEMD_PAGERSECURE=0</varname>
+                      or not removing it from the inherited environment allows the user to invoke arbitrary commands. Note
+                      that if the <varname>$SYSTEMD_PAGER</varname> or <varname>$PAGER</varname> variables are to be
+                      honoured, <varname>$SYSTEMD_PAGERSECURE</varname> must be set too. It might be reasonable to completly
+                      disable the pager using <option>--no-pager</option> instead.</para></listitem>
+
                 </varlistentry>
 
         </variablelist>
diff --git a/src/shared/env-util.c b/src/shared/env-util.c
index 20b208f..ad497f7 100644
--- a/src/shared/env-util.c
+++ b/src/shared/env-util.c
@@ -453,3 +453,13 @@ char **strv_env_clean_log(char **e, const char *message) {
 char **strv_env_clean(char **e) {
         return strv_env_clean_log(e, NULL);
 }
+
+int getenv_bool(const char *p) {
+        const char *e;
+
+        e = getenv(p);
+        if (!e)
+                return -ENXIO;
+
+        return parse_boolean(e);
+}
diff --git a/src/shared/env-util.h b/src/shared/env-util.h
index c0b1e38..4a602c6 100644
--- a/src/shared/env-util.h
+++ b/src/shared/env-util.h
@@ -43,3 +43,4 @@ char **strv_env_unset_many(char **l, ...) _sentinel_;
 
 char *strv_env_get_n(char **l, const char *name, size_t k) _pure_;
 char *strv_env_get(char **x, const char *n) _pure_;
+int getenv_bool(const char *p);
diff --git a/src/shared/pager.c b/src/shared/pager.c
index b00a02b..d0ab6cb 100644
--- a/src/shared/pager.c
+++ b/src/shared/pager.c
@@ -29,6 +29,7 @@
 #include "pager.h"
 #include "util.h"
 #include "macro.h"
+#include "env-util.h"
 
 static pid_t pager_pid = 0;
 
@@ -52,6 +53,7 @@ int pager_open(bool jump_to_end) {
         const char *pager;
         pid_t parent_pid;
         int r;
+        int use_secure_mode = getenv_bool("SYSTEMD_PAGERSECURE");
 
         if (pager_pid > 0)
                 return 1;
@@ -97,22 +99,25 @@ int pager_open(bool jump_to_end) {
                 setenv("LESS", less_opts, 1);
 
                 /* People might invoke us from sudo, don't needlessly allow less to be a way to shell out
-                 * privileged stuff. */
-                r = getenv_bool("SYSTEMD_LESSSECURE");
-                if (r == 0) { /* Remove env var if off */
-                        if (unsetenv("LESSSECURE") < 0) {
-                                log_error_errno(errno, "Failed to uset environment variable LESSSECURE: %m");
-                                _exit(EXIT_FAILURE);
-                        }
-                } else {
-                        /* Set env var otherwise */
-                        if (r < 0)
-                                log_warning_errno(r, "Unable to parse $SYSTEMD_LESSSECURE, ignoring: %m");
-
-                        if (setenv("LESSSECURE", "1", 1) < 0) {
-                                log_error_errno(errno, "Failed to set environment variable LESSSECURE: %m");
-                                _exit(EXIT_FAILURE);
-                        }
+                 * privileged stuff. If the user set $SYSTEMD_PAGERSECURE, trust their configuration of the
+                 * pager. If they didn't, use secure mode when under euid is changed. If $SYSTEMD_PAGERSECURE
+                 * wasn't explicitly set, and we autodetect the need for secure mode, only use the pager we
+                 * know to be good. */
+                if (use_secure_mode < 0) {
+                        log_warning("Unable to parse $SYSTEMD_PAGERSECURE, assuming true: %m");
+                        use_secure_mode = true;
+
+                }
+
+                /* We generally always set variables used by less, even if we end up using a different pager.
+                 * They shouldn't hurt in any case, and ideally other pagers would look at them too. */
+                if (use_secure_mode)
+                        r = setenv("LESSSECURE", "1", 1);
+                else
+                        r = unsetenv("LESSSECURE");
+                if (r < 0) {
+                        log_error("Failed to adjust environment variable LESSSECURE: %m");
+                        _exit(EXIT_FAILURE);
                 }
 
                 /* Make sure the pager goes away when the parent dies */
@@ -124,21 +129,31 @@ int pager_open(bool jump_to_end) {
                 if (getppid() != parent_pid)
                         _exit(EXIT_SUCCESS);
 
-                if (pager) {
+                if (pager && use_secure_mode && !streq(pager, "less")) {
                         execlp(pager, pager, NULL);
                         execl("/bin/sh", "sh", "-c", pager, NULL);
                 }
 
-                /* Debian's alternatives command for pagers is
-                 * called 'pager'. Note that we do not call
-                 * sensible-pagers here, since that is just a
-                 * shell script that implements a logic that
-                 * is similar to this one anyway, but is
-                 * Debian-specific. */
-                execlp("pager", "pager", NULL);
+                if (pager && !use_secure_mode) {
+                        execlp(pager, pager, NULL);
+                        execl("/bin/sh", "sh", "-c", pager, NULL);
+                }
+
+                if (use_secure_mode) {
+                    execlp("less", "less", NULL);
+                }
 
-                execlp("less", "less", NULL);
-                execlp("more", "more", NULL);
+                if (!use_secure_mode) {
+                    /* Debian's alternatives command for pagers is
+                     * called 'pager'. Note that we do not call
+                     * sensible-pagers here, since that is just a
+                     * shell script that implements a logic that
+                     * is similar to this one anyway, but is
+                     * Debian-specific. */
+                    execlp("pager", "pager", NULL);
+
+                    execlp("more", "more", NULL);
+                }
 
                 pager_fallback();
                 /* not reached */
